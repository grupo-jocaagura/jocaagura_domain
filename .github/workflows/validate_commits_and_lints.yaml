name: Validate commits (signed) & linters

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

permissions:
  contents: read

concurrency:
  group: validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1) Firmas de todos los commits del evento
      - name: Check commit signatures (all commits in event)
        shell: bash
        run: |
          set -euo pipefail

          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"

          # Funciona tanto para push como para pull_request (usa payload si hay commits)
          COMMITS_JSON="$(cat "$GITHUB_EVENT_PATH" | jq -r '.commits // [] | .[].id')"
          if [ -z "$COMMITS_JSON" ] && [ -n "${{ github.event.pull_request.head.sha }}" ]; then
            COMMITS_JSON="${{ github.event.pull_request.head.sha }}"
          fi

          mapfile -t SHAS < <(printf "%s\n" "$COMMITS_JSON" | sed '/^$/d')

          if [ "${#SHAS[@]}" -eq 0 ]; then
            echo "No commits found in event payload. Failing for safety."
            exit 1
          fi

          fail=false
          failed_count=0

          for SHA in "${SHAS[@]}"; do
            RESP="$(curl -sSf \
              -H "Authorization: Bearer ${GH_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${OWNER}/${REPO}/commits/${SHA}")" || {
                echo "::error title=API error::Failed to fetch commit ${SHA}"
                fail=true
                ((failed_count++)) || true
                continue
              }

            VERIFIED="$(echo "$RESP" | jq -r '.commit.verification.verified')"
            REASON="$(echo "$RESP" | jq -r '.commit.verification.reason')"

            if [ "$VERIFIED" != "true" ]; then
              echo "::error title=Unsigned/Unverified commit::${SHA} verified=false (reason=${REASON})"
              fail=true
              ((failed_count++)) || true
            else
              echo "✓ ${SHA} verified (signed)"
            fi
          done

          if [ "$fail" = true ]; then
            echo "::error title=Commit signature check failed::${failed_count} commit(s) are unsigned/unverified."
            exit 1
          fi

      # 2) Flutter toolchain
      - name: Setup Flutter
        uses: flutter-actions/setup-flutter@v4
        with:
          flutter-version: stable
          channel: stable

      - name: Flutter doctor (sanity)
        run: flutter doctor -v

      - name: Cache pub
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-

      # 3) Pub get (monorepo o single package)
      - name: Pub get (all packages)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t PUBS < <(git ls-files | grep -E '/?pubspec\.yaml$' | grep -vE '^build/')
          for f in "${PUBS[@]}"; do
            d="$(dirname "$f")"
            echo ">> flutter pub get in $d"
            (cd "$d" && flutter pub get)
          done

      # 4) Bloquear dependency_overrides
      - name: Check dependency_overrides
        shell: bash
        run: |
          set -euo pipefail
          if grep -R --include="pubspec.yaml" -nE '^[[:space:]]*dependency_overrides:' . ; then
            echo "::error title=dependency_overrides detectado::El repo no debe incluir dependency_overrides en pubspec.yaml"
            exit 1
          fi
          echo "✓ No se encontraron dependency_overrides"

      # 5) Formato estricto
      - name: Enforce dart format
        run: dart format --output=none --set-exit-if-changed .

      # 6) Análisis estático (fatal en infos/warnings)
      - name: Dart analyze (fatal on infos/warnings)
        run: dart analyze --fatal-infos --fatal-warnings .
